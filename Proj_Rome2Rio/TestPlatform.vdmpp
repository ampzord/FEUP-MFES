class TestPlatform is subclass of MyTestCase

instance variables
	
	--Graph
	graph : Graph := new Graph();

	--Platform
	platform : Platform := new Platform(graph);
	
	--Locations(ID,Name)
	location1 : Location := new Location(0,"Oporto");
	location2 : Location := new Location(1,"Lisbon");
	location3 : Location := new Location(2,"Faro");
	location4 : Location := new Location(3,"Madrid");
	location5 : Location := new Location(4,"Paris");
	location6 : Location := new Location(5,"London");
	location7 : Location := new Location(6,"Rome");
	location8 : Location := new Location(7,"Amsterdam");
	location9 : Location := new Location(8,"Berlin");
	location10 : Location := new Location(9,"Vienna");
	location11 : Location := new Location(10,"Barcelona");
	
		--Local Variable for testing
	test_location :	set of Location := {location1};
	
	test_all_possible : set of seq of Route := {};	
	--Transports(ID,Name)
	transport1 : Transport := new Transport(0,"Car");
	transport2 : Transport := new Transport(1,"Train");
	transport3 : Transport := new Transport(2,"Plane");
	transport4 : Transport := new Transport(3,"Ferry");
	transport5 : Transport := new Transport(4,"Bus");
	
	--Routes(ID,Duration,DestinationTransport,Price)
	route1 : Route := new Route(0,3,location2,transport1,20);
	route2 : Route := new Route(1,3,location4,transport2,30);
	route3 : Route := new Route(2,3,location4,transport3,40);
	route4 : Route := new Route(3,3,location4,transport4,50);
	route5 : Route := new Route(4,3,location5,transport5,60);
	route6 : Route := new Route(5,3,location1,transport1,70);
	
operations
	
	------------- TRANSPORT TEST----------------------
	
	public testTransport : () ==> ()
	testTransport() == (
		assertEqual(transport1.getID(),0);
		assertEqual(transport1.getName(),"Car")
	);
	
		------------- LOCATION TEST----------------------
	
	public testLocation : () ==> ()
	testLocation() == (
		assertEqual(location1.getID(),0);
		assertEqual(location1.getName(),"Oporto");
		assertEqual(card location1.getRoutes(),0);
		location1.addRoute(route2);
		assertEqual(card location1.getRoutes(),1);
		location1.removeRoute(route2);
		assertEqual(card location1.getRoutes(),0)
	);
	
			------------- ROUTE TEST----------------------
	
	public testRoute : () ==> ()
	testRoute() == (
		assertEqual(route1.getID(),0);
		assertEqual(route1.getDestination(),location2);
		assertEqual(route1.getDuration(),3);
		assertEqual(route1.getTransport(),transport1);
		assertEqual(route1.getPrice(),20);
	);
	
				------------- GRAPH TEST----------------------
	
	public testGraph : () ==> ()
	testGraph() == (
		assertEqual(graph.getSize(),0);
		graph.addLocation(location1);
		graph.addLocation(location2);
		assertEqual(graph.getSize(),2);
		assertTrue(graph.locationExistsByID(location2.getID()));
		assertEqual(graph.searchLocationByID(location2.getID()), location2);
		graph.removeLocation(location2);
		assertEqual(graph.locationExistsByID(location2.getID()),false);
		assertEqual(graph.getSize(),1);
		assertTrue(graph.getLocations() = test_location)
	);
	
					------------- PLATFORM TEST----------------------
	
	public testPlatform : () ==> ()
	testPlatform() == (
		assertEqual(platform.getAllPossibleRoutesSize(), 0);
		assertEqual(platform.getAllPossibleRoutes(), {});
		assertEqual(platform.getGraph(),graph);
		assertEqual(platform.getGraphSize(),0);
		platform.getGraph().addLocation(location1);
		platform.getGraph().addLocation(location2);
		platform.getGraph().addLocation(location4);
		platform.setStart(0);
		platform.setDestination(3);
		assertEqual(platform.getInsertedStart(),location1);
		assertEqual(platform.getInsertedDestination(),location4);
		
		/* Test algorithm */
		platform.getGraph().searchLocationByID(location1.getID()).addRoute(route1);
		platform.getGraph().searchLocationByID(location1.getID()).addRoute(route3);
		platform.getGraph().searchLocationByID(location2.getID()).addRoute(route2);
		assertTrue(platform.getGraph().searchLocationByID(location1.getID()).routeExistsByID(0));
		assertEqual(platform.getGraph().searchLocationByID(location1.getID()).getRouteByID(0),route1);
		assertEqual(card platform.getGraph().searchLocationByID(location1.getID()).getRoutes(), 2);
		
		
		
		platform.getAllRoutes();
		platform.printAllPossiblePaths();
		
	);
		
	public static main: () ==> ()
		main() == (
			/*new TestPlatform().testTransport();
			new TestPlatform().testLocation();
			new TestPlatform().testRoute();
			new TestPlatform().testGraph();*/
			new TestPlatform().testPlatform();
		);
		
		
	
traces
-- TODO Define Combinatorial Test Traces here
end TestPlatform