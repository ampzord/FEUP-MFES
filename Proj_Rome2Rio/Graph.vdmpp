class Graph
/* 
	Class that holds a set of Locations that represent Nodes in the typical Graph-Node-Edge representation. 
*/

instance variables
  private locations:set of (Location); /* represents nodes in a typical graph */
  
operations

	/* Constructor Graph - with set locations that are Nodes - initially it is empty*/
  public Graph : () ==> Graph
  Graph() == (
  	locations := {};
	  return self
  );
  
  /* ------------------ Getters ------------------ */
  
	/* Returns a set of Locations(Nodes) */
  public getLocations : () ==> set of (Location)
	  getLocations() == (
	  	return locations;
  );
  
  /* Returns the number of nodes(Locations) in a graph */
  public getSize : () ==> nat
	  getSize() == (
	  	return card locations;
  );
  
  /* Adds a location to the graph */
  public addLocation : Location ==> ()
	  addLocation(newLocation) == (
	  	locations := {newLocation} union locations;
  )
  pre not newLocation in set locations
  post newLocation in set locations;
  
  /* Removes a Location from the graph */
  public removeLocation : Location ==> ()
	  removeLocation(deleteLocation) == (
	  	locations := locations \ {deleteLocation};
  )
  pre deleteLocation in set locations
  post not deleteLocation in set locations;
  
  /* Returns a location given an ID - if non-exist returns empty location */
  public searchLocationByID : nat ==> Location
  searchLocationByID(locationID) == (
  	dcl tempCity : Location;
  	for all city in set locations do (
  		if city.getID() = locationID 
  		then tempCity := city;
  	);
  	return tempCity;
  );
  
  /* Verifies if a location by the given ID exists 
  	 return true if it does and false if it doesn't
  */
  public locationExistsByID : nat ==> bool
  locationExistsByID(locationID) == (
  	for all city in set locations do (
  		if city.getID() = locationID 
  		then return true;
  	);
  	return false;
  );
  
  

  	
  
  	

end Graph
